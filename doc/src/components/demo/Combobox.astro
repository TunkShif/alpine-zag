---
import { checkbox, input } from "@/styles"
import DemoCard from "@/components//DemoCard.astro"
import ChevronDownIcon from "@/components/icons/ChevronDownIcon.astro"
---

<script>
  import { normalizeProps, useAPI, useMachine } from "@tunkshif/alpine-zag"
  import { id } from "@/utils"
  import * as combobox from "@zag-js/combobox"
  import Alpine from "alpinejs"

  const artists = [
    "Lana Del Rey",
    "Kali Uchis",
    "Tame Impala",
    "Rihanna",
    "Caroline Polachek",
    "Adele",
    "Drake",
    "Shakira",
    "Lady Gaga",
    "Beyoncé",
    "Pablo Alborán",
    "Bilie Eilish",
    "Rosalía",
    "Björk",
    "The Weeknd",
    "Coldplay",
    "Jolin Tsai",
    "Tori Amos",
    "Konstantinos Argiros",
    "Post Malone",
    "Ricky Martin",
    "SZA",
    "Nick Jonas",
    "Kate Bush",
    "Luke Bryan",
    "Keith Urban"
  ]

  const createCollection = (items: string[]) =>
    combobox.collection({
      items: Alpine.raw(items),
      itemToValue: (item: string) => item,
      itemToString: (item: string) => item
    })

  document.addEventListener("alpine:init", () => {
    Alpine.data("ArtistCombobox", (controls: Record<string, unknown>) => {
      const items = Alpine.reactive({ value: [] })
      const service = useMachine(
        Alpine,
        combobox.machine({
          id: id(),
          collection: createCollection(items.value),
          placeholder: "type or select an artist",
          inputBehavior: "autohighlight",
          positioning: {
            flip: true,
            sameWidth: true
          },
          onOpenChange: () => {
            items.value = artists
          },
          onInputValueChange: ({ value }) => {
            const filtered = artists.filter((item) =>
              item.toLowerCase().includes(value.toLowerCase())
            )
            items.value = filtered.length > 0 ? filtered : artists
          }
        }),
        { context: controls }
      )
      const api = useAPI(Alpine, () =>
        combobox.connect(service.state.value, service.send, normalizeProps)
      )

      let unwatch: () => void
      return {
        init() {
          service.start()
          api.start()
          // @ts-ignore
          unwatch = Alpine.watch(
            () => items.value,
            (items: string[]) => {
              service.machine.setContext({ collection: createCollection(items) })
            }
          )
        },
        destroy() {
          unwatch()
          api.stop()
          service.stop()
        },
        get api() {
          return api.value
        },
        get items() {
          return items.value
        }
      }
    })
  })
</script>

<DemoCard
  name="combobox"
  file="Combobox"
  title="Combobox"
  controls={{ disabled: false, readOnly: false, loop: true }}
>
  <div
    slot="content"
    x-data="ArtistCombobox(controls)"
    x-props="api.rootProps"
    class="combobox-root"
  >
    <label x-props="api.labelProps" class="font-medium">Pick your favorite artist</label>
    <div x-props="api.controlProps" class="relative">
      <input
        x-props="api.inputProps"
        class={input("min-w-28 placeholder:text-slate-500 placeholder:italic text-slate-700")}
      />
      <button x-props="api.triggerProps" type="button" class="absolute inset-y-0 right-2">
        <ChevronDownIcon class="w-4 h-4" />
      </button>
    </div>

    <template x-teleport="body">
      <div x-cloak x-props="api.positionerProps">
        <div x-props="api.contentProps" class="combobox-content">
          <ul class="flex flex-col gap-0.5">
            <template x-for="item in items">
              <li x-props="api.getItemProps({ item })" class="combobox-item">
                <button type="button" x-text="item" class="w-full text-left"></button>
              </li>
            </template>
          </ul>
        </div>
      </div>
    </template>
  </div>

  <div slot="control" class="w-full flex flex-col gap-2">
    <label class="flex justify-between items-center text-sm">
      <span>Disabled</span>
      <input type="checkbox" x-model="controls.disabled" class={checkbox()} />
    </label>
    <label class="flex justify-between items-center text-sm">
      <span>Input Read Only</span>
      <input type="checkbox" x-model="controls.readOnly" class={checkbox()} />
    </label>
    <label class="flex justify-between items-center text-sm">
      <span>Loop Keyboard Navigation</span>
      <input type="checkbox" x-model="controls.loop" class={checkbox()} />
    </label>
  </div>
</DemoCard>

<style>
  [data-part="content"] {
    @apply relative z-[1400] max-h-48 bg-white border border-slate-200/40 p-1 rounded-md shadow-md overflow-auto;
  }

  [data-part="item"] {
    @apply inline-flex p-1.5 text-sm font-medium rounded-md;
  }

  [data-part="item"]:hover {
    @apply bg-gray-50;
  }

  [data-part="item"][data-highlighted] {
    @apply bg-gray-50;
  }

  [data-part="label"][data-disabled] {
    @apply opacity-60;
  }

  [data-part="control"][data-disabled] {
    @apply opacity-60;
  }

  [data-part="item"][data-disabled] {
    @apply opacity-60 pointer-events-none;
  }
</style>
